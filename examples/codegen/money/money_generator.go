//go:build ignore

package main

import (
	"bytes"
	"go/format"
	"os"
	"text/template"

	"github.com/BurntSushi/toml"
)

type Config struct {
	Money struct {
		Currency string `toml:"currency"`
	} `toml:"money"`
}

func main() {
	var config Config
	if _, err := toml.DecodeFile("config.toml", &config); err != nil {
		panic(err)
	}

	tmpl := template.Must(template.New("money").Parse(`
// Code generated by go generate; DO NOT EDIT.
package money 

import (
  "github.com/khatibomar/fulus"
  "github.com/khatibomar/fulus/currency"
)

type Money = fulus.Money[currency.{{.Money.Currency}}]
type Currency = currency.Currency

// New creates a new Money instance with the given amount and currency.
// The amount should be specified in the currency's smallest sub-unit 
// (e.g., cents for USD, pence for GBP). For example:
// USD 10.50 should be passed as 1050
// EUR 5.99 should be passed as 599
func New(amount int64) fulus.Money[currency.{{.Money.Currency}}] {
  return fulus.NewMoney[currency.{{.Money.Currency}}](amount)
}
`))

	buf := new(bytes.Buffer)
	if err := tmpl.Execute(buf, config); err != nil {
		panic(err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}

	if err := os.WriteFile("money/money_gen.go", formatted, 0644); err != nil {
		panic(err)
	}
}
